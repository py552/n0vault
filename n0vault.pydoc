Help on package n0vault:

NAME
    n0vault

DESCRIPTION
    # 0.01 = 2021-03-06 = Initial version
    # 0.02 = 2021-07-19 = Added functionality to enter sensitive data without easy retrieving

PACKAGE CONTENTS
    __main__
    test (package)

CLASSES
    builtins.dict(builtins.object)
        n0Vault
    
    class n0Vault(builtins.dict)
     |  n0Vault(vault_file_name: str = None, encrypted=True, password: str = None, key=None)
     |  
     |  dict() -> new empty dictionary
     |  dict(mapping) -> new dictionary initialized from a mapping object's
     |      (key, value) pairs
     |  dict(iterable) -> new dictionary initialized as if via:
     |      d = {}
     |      for k, v in iterable:
     |          d[k] = v
     |  dict(**kwargs) -> new dictionary initialized with the name=value pairs
     |      in the keyword argument list.  For example:  dict(one=1, two=2)
     |  
     |  Method resolution order:
     |      n0Vault
     |      builtins.dict
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(self, xpath)
     |      Public operator: isntance[xpath]
     |      return isntance._vault[where1/where2/.../whereN]
     |          AKA
     |      return isntance._vault[where1][where2]...[whereN]
     |      
     |      If any of [where1][where2]...[whereN] are not found, exception IndexError will be raised
     |  
     |  __init__(self, vault_file_name: str = None, encrypted=True, password: str = None, key=None)
     |      Constructor for n0Vault
     |      
     |      vault_file_name: str = None,    storage file name
     |      encrypted = True,               save as encrypted by default
     |      password: str = None,           password will be used during saving
     |      key = None                      256-bit Key encrypted with base64
     |  
     |  __setitem__(self, xpath: str, new_value)
     |      Public operator: isntance[xpath] = new_value
     |      
     |      Update isntance._vault with {xpath:new_value}
     |  
     |  delete(self, xpath) -> dict
     |      Public method: isntance.delete(xpath)
     |      
     |      Delete item 'xpath' from isntance._vault
     |  
     |  get(self, xpath: str, if_not_found=None)
     |      Public method: isntance.get(xpath: str, if_not_found = None)
     |      return _vault[where1/where2/.../whereN]
     |          AKA
     |      return _vault[where1][where2]...[whereN]
     |      
     |      If any of [where1][where2]...[whereN] are not found, if_not_found will be returned
     |  
     |  is_bit_set(self, bit_offset: int = 0, binary_mask: int = 1, bytes_array: int = None) -> int
     |      Public method: isntance.is_bit_set(bit_offset: int = 0, binary_mask: int = 0b1, bytes_array: int = None) -> int:
     |      
     |      Return bits' set from bit_offset of bytes_array/self.__flags and applied binary_mask
     |  
     |  load(self, vault_file_name: str)
     |      Public method: isntance.load(vault_file_name: str):
     |      
     |      Load 'vault_file_name' and decrypt it if it was encrypted.
     |  
     |  pop(self, xpath) -> dict
     |      Public method: isntance.pop(xpath)
     |      
     |      Return value associated with 'xpath' and delete item 'xpath' from isntance._vault
     |  
     |  save(self, new_vault_file_name: str = None, forbid_next_saving=False)
     |      Public method: isntance.save(new_vault_file_name: str = None, forbid_next_saving = False):
     |      
     |      Save file depends of self._encrypted flag into encrypted or decrypted format.
     |      if 3rd bit in self.__flags is already set previously, then Exception will be raised -- saving is forbidden.
     |  
     |  set_bits(self, bytes_array: int, bits_value: int, bits_len: int = 1, bits_offset: int = 0, bits_in_bytes: int = 32) -> int
     |      Public method: isntance.set_bits(bytes_array: int, bits_value: int, bits_len: int = 1, bits_offset: int = 0, bits_in_bytes: int = 32)
     |      
     |      Apply bits_value to bits_offset of bytes_array
     |      
     |      1) Prepare all bits mask depends of bits_in_bytes (bytes_array size): 0xFF, 0xFFFF, 0xFFFFFFFF
     |          bits_in_bytes =  8              => bits_mask = b0000_0000__0000_0000___0000_0000__1111_1111
     |          bits_in_bytes = 16              => bits_mask = b0000_0000__0000_0000___1111_1111__1111_1111
     |          bits_in_bytes = 32              => bits_mask = b1111_1111__1111_1111___1111_1111__1111_1111
     |      
     |      2) Prepare the mask for bits place clearing, depends of bits_len and bits_offset
     |          bits_len = 1, bits_offset = 0   => b0000_0000__0000_0000___0000_0000__0000_0001 => clear_bits_mask = b1111_1111__1111_1111___1111_1111__1111_1110
     |          bits_len = 2, bits_offset = 0   => b0000_0000__0000_0000___0000_0000__0000_0011 => clear_bits_mask = b1111_1111__1111_1111___1111_1111__1111_1100
     |          bits_len = 3, bits_offset = 0   => b0000_0000__0000_0000___0000_0000__0000_0111 => clear_bits_mask = b1111_1111__1111_1111___1111_1111__1111_1000
     |          bits_len = 8, bits_offset = 0   => b0000_0000__0000_0000___0000_0000__1111_1111 => clear_bits_mask = b1111_1111__1111_1111___1111_1111__0000_0000
     |                                                                                                                                                           
     |          bits_len = 1, bits_offset = 4   => b0000_0000__0000_0000___0000_0000__0001_0000 => clear_bits_mask = b1111_1111__1111_1111___1111_1111__1110_1111
     |          bits_len = 2, bits_offset = 4   => b0000_0000__0000_0000___0000_0000__0011_0000 => clear_bits_mask = b1111_1111__1111_1111___1111_1111__1100_1111
     |          bits_len = 3, bits_offset = 4   => b0000_0000__0000_0000___0000_0000__0111_0000 => clear_bits_mask = b1111_1111__1111_1111___1111_1111__1000_1111
     |          bits_len = 8, bits_offset = 4   => b0000_0000__0000_0000___0000_1111__1111_0000 => clear_bits_mask = b1111_1111__1111_1111___1111_0000__0000_1111
     |          
     |      3) Clearing the bits place 
     |      
     |      4) Update the cleared place with bits_value
     |  
     |  show(self, start_from=None) -> dict
     |      Public method: isntance.show(start_from = None)
     |      
     |      Return json structure of isntance._vault or isntance._vault[start_from]
     |  
     |  update(self, xpath: Union[dict, str], new_value: str = None) -> dict
     |      Public method: isntance.update(xpath: typing.Union[dict, str], new_value: str = None)
     |      
     |      Update isntance._vault with {xpath:new_value} or {xpath as a dictionary}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  vault_file_name = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |  
     |  __contains__(self, key, /)
     |      True if the dictionary has the specified key, else False.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(self, /)
     |      Return a reverse iterator over the dict keys.
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  popitem(self, /)
     |      Remove and return a (key, value) pair as a 2-tuple.
     |      
     |      Pairs are returned in LIFO (last-in, first-out) order.
     |      Raises KeyError if the dict is empty.
     |  
     |  setdefault(self, key, default=None, /)
     |      Insert key with a value of default if key is not in the dictionary.
     |      
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.dict:
     |  
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Create a new dictionary with keys from iterable and values set to value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.dict:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |  
     |  __hash__ = None

DATA
    annotations = _Feature((3, 7, 0, 'beta', 1), (3, 10, 0, 'alpha', 0), 1...
    logger = <loguru.logger handlers=[(id=0, level=10, sink=<stderr>)]>

FILE
    d:\repo\n0vault\n0vault\__init__.py


